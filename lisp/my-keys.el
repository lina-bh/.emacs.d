;; -*- lexical-binding: t; -*-
(defun split-and-follow-vertically ()
  (interactive)
  (let ((window (split-window-below)))
    (select-window window)))

(defun split-and-follow-horizontally ()
  (interactive)
  (let ((window (split-window-right)))
    (select-window window)))

(defun c-w-dwim ()
  (interactive)
  (if (use-region-p)
      (kill-region (region-beginning)
                   (region-end))
    (backward-kill-word 1)))

(defun indent-region-or-buffer (beg end)
  "Call `indent-region' on either the selected region or the whole buffer."
  (interactive "r")
  (unless (use-region-p)
    (setq beg (point-min)
          end (point-max)))
  (save-excursion
    (indent-region beg end)
    (whitespace-cleanup-region beg end)))

(dolist (key '("M-u" "s-q" "M-s"))
  (unbind-key key global-map))
(bind-keys
 ("C-x 2" . split-and-follow-vertically)
 ("C-x 3" . split-and-follow-horizontally)
 ("C-k" . kill-whole-line)
 ("C-w" . c-w-dwim)
 ("C-x x" . revert-buffer-quick)
 ("C-z" . undo)
 ("C-S-z" . undo-redo)
 ("s-Z" . undo-redo)
 ("M-i" . completion-at-point)
 ("M-k" . kill-sexp)
 ("M-;" . comment-line)
 ("M-," . pop-global-mark)
 ("M-SPC" . just-one-space)
 ("C-s" . isearch-forward-regexp)
 ("C-h c" . describe-char)
 ("C-h g" . customize-group)
 ("C-h ," . customize-variable)
 ("C-h s" . info-lookup-symbol)
 ("C-x C-r" . recentf-open)
 ("M-/" . xref-find-definitions)
 ("M-!" . project-shell-command)
 ("M-&" . project-async-shell-command)
 ("C-c f" . indent-region-or-buffer)
 ("C-S-c" . kill-ring-save)
 ("C-S-v" . yank)
 ("C-x d" . dired-jump)
 ("C-x C-d" . dired)
 ("C-x =" . balance-windows)
 ("C-x q" . quit-window)
 ("s-w" . quit-window)
 ("M-:" . pp-eval-expression))
(bind-key "C-u" #'backward-kill-sentence minibuffer-local-map)
(bind-key "ESC" #'isearch-exit isearch-mode-map)

(provide 'my-keys)
